buildscript {
    repositories {
        maven { url "https://dl.bintray.com/nebula/gradle-plugins" }
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
}

// gradle aggregateJavadoc
apply plugin: 'nebula-aggregate-javadocs'
apply plugin: 'jacoco'

allprojects {
    group = 'io.emeraldpay.polkaj'
    version = "0.3.0-BC4"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.jfrog.org/artifactory/repo' }
        //for java-multibase
        maven { url 'https://jitpack.io' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'

    targetCompatibility = '11'
    sourceCompatibility = '11'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    compileJava.options.compilerArgs \
        << '-Xlint:unchecked' << '-Xlint:deprecation'

    dependencies {
        testImplementation 'org.objenesis:objenesis:3.1'
        testImplementation ('org.spockframework:spock-core:2.0-M2-groovy-3.0') {
            exclude group: 'org.codehaus.groovy'
        }
        testImplementation "nl.jqno.equalsverifier:equalsverifier:3.3"
        testImplementation 'org.codehaus.groovy:groovy-all:3.0.3'
        testImplementation 'commons-codec:commons-codec:1.14'
        testImplementation 'cglib:cglib-nodep:3.3.0'
    }

    test {
        jvmArgs '-ea'
        systemProperty "java.library.path", file("${project.rootDir}/polkaj-schnorrkel/build/rust/release").absolutePath
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    test.finalizedBy jacocoTestReport

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacoco {
        toolVersion = "0.8.5"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version

                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'Polkadot Java Client'
                    description = 'Java client library to access Polkadot based networks'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }

        repositories {
            project.ext.set('repo', project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases')
            maven {
                url "${nexusUrl}/repository/maven-${project.repo}/"
                credentials(PasswordCredentials) {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.5"
}

task coverageReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task syncJars(type: Sync) {
    allprojects { p ->
        from p.tasks.withType(Jar)
    }
    into "${buildDir}/libs/"
}
